# Entity to represent a collection
# defined on chain as  pub type Collection<T: Config<I>, I: 'static = ()> 
# https://github.com/paritytech/polkadot-sdk/blob/b8ad0d1f565659f004165c5244acba78828d0bf7/substrate/frame/nfts/src/lib.rs#L217
type CollectionEntity @entity {
  attributes: [Attribute!]
  blockNumber: BigInt @index
  burned: Boolean!
  createdAt: DateTime! @index
  currentOwner: String!
  distribution: Int!
  events: [CollectionEvent!] @derivedFrom(field: "collection")
  floor: BigInt! @index
  hash: String! @unique
  highestSale: BigInt! @index
  id: ID!
  image: String
  issuer: String!
  max: Int
  media: String
  meta: MetadataEntity
  metadata: String
  name: String @index
  nftCount: Int! @index
  nfts: [NFTEntity!] @derivedFrom(field: "collection")
  ownerCount: Int!
  recipient: String
  royalty: Float
  supply: Int! @index
  updatedAt: DateTime! @index
  version: Int!
  volume: BigInt! @index
  type: CollectionType
  settings: CollectionSettings
}

# Entity to group NFTEntity by common metadata
# grouping is done either by NFTEntity.image or NFTEntity.media 
# https://github.com/paritytech/polkadot-sdk/blob/b8ad0d1f565659f004165c5244acba78828d0bf7/substrate/frame/nfts/src/lib.rs#L293
type TokenEntity @entity {
  id: ID!
  blockNumber: BigInt
  collection: CollectionEntity
  nfts: [NFTEntity!] @derivedFrom(field: "token")
  hash: String! @index
  image: String
  media: String
  meta: MetadataEntity
  metadata: String
  name: String @index
  updatedAt: DateTime!
  createdAt: DateTime!
  supply: Int!
  count: Int!
}

# Entity to represent a collection
# defined on chain as  pub type Item<T: Config<I>, I: 'static = ()>
# https://github.com/paritytech/polkadot-sdk/blob/b8ad0d1f565659f004165c5244acba78828d0bf7/substrate/frame/nfts/src/lib.rs#L271
type NFTEntity @entity {
  attributes: [Attribute!]
  blockNumber: BigInt @index
  burned: Boolean!
  collection: CollectionEntity!
  createdAt: DateTime!
  currentOwner: String! @index
  events: [Event!] @derivedFrom(field: "nft")
  hash: String! @index
  id: ID!
  image: String
  issuer: String!
  lewd: Boolean!
  media: String
  meta: MetadataEntity
  metadata: String
  name: String @index
  price: BigInt @index
  recipient: String
  royalty: Float
  sn: BigInt! @index
  updatedAt: DateTime! @index
  version: Int!
  token: TokenEntity
}

# Entity to represent a Metadata
# defined on chain as  pub type Metadata<T: Config<I>, I: 'static = ()>
# https://github.com/paritytech/polkadot-sdk/blob/b8ad0d1f565659f004165c5244acba78828d0bf7/substrate/frame/nfts/src/lib.rs#L283
type MetadataEntity @entity {
  id: ID!
  name: String
  description: String
  image: String
  attributes: [Attribute!]
  animationUrl: String
  type: String
  banner: String
}

# Entity to represent an Attribute
# defined on chain as  pub type Attribute<T: Config<I>, I: 'static = ()>
# https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/nfts/src/lib.rs#L305
type Attribute @jsonField {
  display: String
  trait: String
  value: String!
}

# Entity to represent a CollectionSettings
# defined on chain as  pub type CollectionSettings<T: Config<I>, I: 'static = ()>
# https://github.com/paritytech/polkadot-sdk/blob/b8ad0d1f565659f004165c5244acba78828d0bf7/substrate/frame/nfts/src/lib.rs#L366
type CollectionSettings @jsonField {
  value: String
  startBlock: BigInt
  endBlock: BigInt
  price: BigInt
}

# Abstract entity to represent an event
# https://graphql.org/learn/schema/#interfaces
interface EventType {
  id: ID!
  blockNumber: BigInt
  timestamp: DateTime!
  caller: String!
  currentOwner: String
  interaction: Interaction!
  # version: Int!
  meta: String!
}

# Entity to represent an event defined by Interaction
type Event implements EventType @entity {
  id: ID!
  blockNumber: BigInt
  timestamp: DateTime!
  caller: String!
  currentOwner: String! # currentOwner
  interaction: Interaction!
  meta: String!
  nft: NFTEntity!
  # version: Int!
}

type CollectionEvent implements EventType @entity {
  id: ID!
  blockNumber: BigInt
  timestamp: DateTime!
  caller: String!
  currentOwner: String # currentOwner
  interaction: Interaction!
  meta: String!
  collection: CollectionEntity!
  # version: Int!
}

# Possible on-chain interactions that we listen for
enum Interaction {
  BURN
  BUY
  CREATE
  DESTROY
  LIST
  MINT
  SEND
  UNLIST
  LOCK
  CHANGEISSUER
  PAY_ROYALTY
  # ROYALTY
}

# Possible collection types
# HolderOf: user can mint if they hold a NFT from a specific collection
# Issuer: only the issuer can mint
# Public: anyone can mint
enum CollectionType {
  HolderOf
  Issuer
  Public
}

# Entity to represent a Fungible Asset
# defined on chain as  pub type Asset<T: Config<I>, I: 'static = ()>
# https://github.com/paritytech/polkadot-sdk/blob/99234440f0f8b24f7e4d1d3a0102a9b19a408dd3/substrate/frame/assets/src/lib.rs#L325
type AssetEntity @entity {
  id: ID!
  name: String
  symbol: String
  decimals: Int
}

# Entity to represent when the cache was last updated
type CacheStatus @entity {
  id: ID!
  lastBlockTimestamp: DateTime!
}